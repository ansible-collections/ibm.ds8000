# Copyright (C) 2022 IBM CORPORATION
# Apache License, Version 2.0 (see https://opensource.org/licenses/Apache-2.0)

####################################################################
# WARNING: These are designed specifically for Ansible tests       #
# and should not be used as examples of how to write Ansible roles #
####################################################################
---
- name: "ds8000_volume integration tests"
  module_defaults:
    group/ibm.ds8000.ds8000:
      hostname: "{{ ds8000_hostname }}"
      username: "{{ ds8000_username }}"
      password: "{{ ds8000_password }}"
      validate_certs: "{{ ds8000_validate_certs }}"

  block:
    - name: Create fb volume
      ibm.ds8000.ds8000_volume:
        name: "{{ vol_name }}"
        state: present
        pool: "{{ pool_fb }}"
        capacity: "{{ capacity_fb }}"
      register: result
    - name: Verify the fb volume
      ansible.builtin.assert:
        that:
          - result is success
          - result is changed
          - "result.volumes[0].name == '{{vol_name}}'"
          # - "result.volumes[0].pool == {{ pool_fb }}"
          # - "result.volumes[0].cap_gib == {{ capacity_fb }}"

    - name: Delete fb volume
      ibm.ds8000.ds8000_volume:
        id: "{{ item.id }}"
        state: absent
      with_items: "{{ result.volumes }}"
      register: result
    - name: Verify the result
      ansible.builtin.assert:
        that:
          - result is success
          - result is changed

    - name: Create ckd volume
      ibm.ds8000.ds8000_volume:
        name: ansible
        state: present
        pool: "{{ pool_ckd }}"
        capacity: "{{ capacity_ckd }}"
        capacity_type: cyl
        volume_type: ckd
      register: result
    - name: Verify the ckd volume
      ansible.builtin.assert:
        that:
          - result is success
          - result is changed
          - "result.volumes[0].name == '{{ vol_name }}'"

    # Assumes the next ids are available
    - name: Create ckd alias volumes
      ibm.ds8000.ds8000_volume:
        state: present
        alias: yes
        alias_order: increment
        ckd_base_ids: ["{{ result.volumes[0].id }}"]
        id: "{{ '%X' % ((result.volumes[0].id | int(base=16))+1) }}"
        quantity: 2
      register: result_a
    - name: Verify the ckd alias volumes increment
      ansible.builtin.assert:
        that:
          - result_a is success
          - result_a is changed
          - result_a.volumes[0].id == "{{ '%X' % ((result.volumes[0].id | int(base=16))+1) }}"

    - name: Delete ckd alias volumes
      ibm.ds8000.ds8000_volume:
        volume_id: "{{ item.id }}"
        state: absent
      with_items: "{{ result_a.volumes }}"
      register: result_a
    - name: Verify the result
      ansible.builtin.assert:
        that:
          - result_a is success
          - result_a is changed

    - name: Create ckd alias volumes decrement
      ibm.ds8000.ds8000_volume:
        state: present
        alias: yes
        alias_order: decrement
        ckd_base_ids: ["{{ result.volumes[0].id }}"]
        id: "{{ '%X' % ((result.volumes[0].id | int(base=16))+4) }}"
        quantity: 2
      register: result_a
    - name: Verify the ckd alias volumes decrement
      ansible.builtin.assert:
        that:
          - result_a is success
          - result_a is changed
          - result_a.volumes[0].id == "{{ '%X' % ((result.volumes[0].id | int(base=16))+4) }}"

    - name: Delete ckd alias volumes decrement
      ibm.ds8000.ds8000_volume:
        volume_id: "{{ item.id }}"
        state: absent
      with_items: "{{ result_a.volumes }}"
      register: result_a
    - name: Verify the result
      ansible.builtin.assert:
        that:
          - result_a is success
          - result_a is changed

    - name: Delete ckd volume
      ibm.ds8000.ds8000_volume:
        volume_id: "{{ item.id }}"
        state: absent
      with_items: "{{ result.volumes }}"
      register: result
    - name: Verify the result
      ansible.builtin.assert:
        that:
          - result is success
          - result is changed

    - name: Create 3 fb volumes
      ibm.ds8000.ds8000_volume:
        name: "{{ vol_name }}"
        state: present
        pool: "{{ pool_fb }}"
        capacity: "{{ capacity_fb }}"
        quantity: 3
      register: result
    - ansible.builtin.assert:
        that:
          - result is success
          - result is changed
          - "result.volumes[0].name == '{{vol_name}}'"

    - name: Delete the 3 fb volumes
      ibm.ds8000.ds8000_volume:
        id: "{{ item.id }}"
        state: absent
      with_items: "{{ result.volumes }}"
      register: result

    - name: Create ckd volumes by id
      ibm.ds8000.ds8000_volume:
        name: ansible
        state: present
        pool: "{{ pool_ckd }}"
        capacity: "{{ capacity_ckd }}"
        capacity_type: cyl
        volume_type: ckd
        id: "{{ ckd_vol_ids }}"
      register: result
    - name: Verify the ckd volumes by id
      ansible.builtin.assert:
        that:
          - result is success
          - result is changed
          - "result.volumes[0].id == '{{ ckd_vol_ids[0] }}'"

    - name: Delete ckd volumes by id
      ibm.ds8000.ds8000_volume:
        id: "{{ ckd_vol_ids }}"
        state: absent
      register: result
    - name: Verify the result
      ansible.builtin.assert:
        that:
          - result is success
          - result is changed

    # Error Path
    - name: Test create volume without name
      ibm.ds8000.ds8000_volume:
        state: present
        pool: "{{ pool_fb }}"
        capacity: "{{ capacity_fb }}"
      register: result
      ignore_errors: yes
    - name: Verify not specifying name failed
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - "'state is present but any of the following are missing: name, alias' in result.msg"

    - name: Test create volume without pool
      ibm.ds8000.ds8000_volume:
        name: "{{ vol_name }}"
        state: present
        capacity: "{{ capacity_fb }}"
      register: result
      ignore_errors: yes
    - name: Verify not specifying pool failed
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - result.msg is search("missing parameter(s) required by 'name': pool")

    - name: Test create volume without cap
      ibm.ds8000.ds8000_volume:
        name: "{{ vol_name }}"
        state: present
        pool: "{{ pool_fb }}"
      register: result
      ignore_errors: yes
    - name: Verify not specifying cap failed
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - result.msg is search("missing parameter(s) required by 'name': capacity")

    - name: Test delete volume name
      ibm.ds8000.ds8000_volume:
        name: "blah"
        state: absent
      register: result
      ignore_errors: yes
    - name: Verify specifying name failed
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - "'state is absent but all of the following are missing: id' in result.msg"

    # - name: Create fb volume with ckd pool
    #   ibm.ds8000.ds8000_volume:
    #     state: present
    #     name: fail
    #     pool: "{{ pool_fb }}"
    #     capacity: "{{ capacity_fb }}"
    #   register: result
    #   ignore_errors: yes
    # - ansible.builtin.assert:
    #     that:
    #       - result is failure
    #       - result is not changed

    - name: Create fb volume with ckd volume_type
      ibm.ds8000.ds8000_volume:
        state: present
        name: fail
        pool: "{{ pool_fb }}"
        capacity: "{{ capacity_fb }}"
        volume_type: ckd
      register: result
      ignore_errors: yes
    - name: Verify fb volume with ckd volume_type failed
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - "'[BE7A0008] The value for attribute capType: gib is not valid.' in result.msg"

    - name: Create fb volume with ckd cap_type
      ibm.ds8000.ds8000_volume:
        state: present
        name: fail
        pool: "{{ pool_fb }}"
        capacity: "{{ capacity_fb }}"
        capacity_type: cyl
      register: result
      ignore_errors: yes
    - name: Verify fb volume with ckd cap_type failed
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - "'[BE7A0008] The value for attribute capType: cyl is not valid.' in result.msg"

    - name: Create ckd alias volumes without ckd_base_ids
      ibm.ds8000.ds8000_volume:
        state: present
        alias: yes
        alias_order: increment
        id: "FFFF"
        quantity: 2
      register: result
      ignore_errors: yes
    - name: Verify alias failed without ckd_base_ids
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - result.msg is search("missing parameter(s) required by 'alias': ckd_base_ids")

    - name: Create ckd alias volumes with multiple ids
      ibm.ds8000.ds8000_volume:
        state: present
        alias: yes
        alias_order: decrement
        ckd_base_ids: ["FF00"]
        id: ["FFFF", "FFFE"]
        quantity: 2
      register: result
      ignore_errors: yes
    - name: Verify alias failed with multiple ids
      ansible.builtin.assert:
        that:
          - result is failure
          - result is not changed
          - result.msg is search("Only one id is allowed when creating alias volumes.")
